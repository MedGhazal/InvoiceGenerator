from datetime import date
from csv import DictWriter
from os import getcwd, remove
from os.path import join
from tempfile import (
    SpooledTemporaryFile,
)
from zipfile import (
    ZIP_DEFLATED,
    ZipFile,
)
from django.utils.translation import gettext as _
from django.contrib.admin import (
    action,
    register,
    ModelAdmin,
    SimpleListFilter,
)
from django.http import (
    HttpResponse,
)
from django.contrib.messages import error
from Invoicee.models import Invoicee
from Invoicer.models import Invoicer
from .models import Invoice, Project, Fee, Payment
from .utils import (
    generate_invoice_file,
    export_invoice_data,
    LateXError,
)
from InvoiceGenerator.settings import TEMPTEXFILESDIR, EXPORT_DATA_HEADER


@action(description=_('InvoiceGenerateAction'))
def generate_invoice(invoiceAdmin, request, querySet):
    with SpooledTemporaryFile() as temporaryFile:
        with ZipFile(temporaryFile, 'w', ZIP_DEFLATED) as archive:
            for invoice in querySet:
                try:
                    file = generate_invoice_file(invoice)
                    pathToFile = join(getcwd(), TEMPTEXFILESDIR, file)
                    archive.write(pathToFile, file)
                    remove(pathToFile)
                except LateXError as e:
                    error(request, ' '.join(e.args))
                    return None
            temporaryFile.seek(0)
            response = HttpResponse(temporaryFile.read())
            response['Content-Disposition'] = 'attachment; filename="pdfs.zip"'
            return response


@action(description=_('InvoicesDataExportAction'))
def export_invoices(invoiceAdmin, request, querySet):
    with SpooledTemporaryFile(
        mode='w',
        encoding='utf-8',
        newline='',
    ) as temporaryFile:
        dictWriter = DictWriter(temporaryFile, EXPORT_DATA_HEADER)
        dictWriter.writeheader()
        for invoice in querySet:
            data = export_invoice_data(invoice, EXPORT_DATA_HEADER)
            dictWriter.writerows(data)
        temporaryFile.seek(0)
        response = HttpResponse(temporaryFile.read())
        response['Content-Disposition'] = 'attachment; filename="export.csv"'
        return response


@action(description=_('InvoiceValidateAction'))
def validate_invoices(invoiceAdmin, request, querySet):
    for invoice in querySet:
        invoice.draft = False
        invoice.save()


class InvoiceStatusFilter(SimpleListFilter):
    title = _('Status')
    parameter_name = _('Status')

    def lookups(self, request, model_admin):
        return [
            (0, _('Draft')),
            (1, _('Validated')),
            (2, _('Paid')),
            (3, _('OverDue')),
            (4, _('LongOverDue')),
        ]

    def queryset(self, request, querySet):
        if self.value() == 0:
            return querySet.filter(status__eq=0)
        elif self.value() == 1:
            return querySet.filter(status__eq=1)
        elif self.value() == 2:
            return querySet.filter(status__eq=2)
        elif self.value() == 3:
            return querySet.filter(dueDate__lte=date.today())
        elif self.value() == 4:
            return querySet.filter(dueDate__lte=date.today() - 5)
        else:
            return None


@register(Invoice)
class InvoiceAdmin(ModelAdmin):
    actions = [
        generate_invoice,
        export_invoices,
        validate_invoices,
    ]
    list_filter = (
        'invoicer',
        'invoicee',
        InvoiceStatusFilter,
    )
    list_display = (
        '__str__',
        'get_projects',
        'dueDate',
        'facturationDate',
        'get_status',
    )
    readonly_fields = ('paidAmount', 'owedAmount')
    autocomplete_fields = ('invoicee', 'invoicer')
    search_fields = ('description',)

    def get_status(self, invoice):
        if invoice.status == 0:
            return _('Draft')
        elif invoice.status == 1:
            return _('Validated')
        elif invoice.status == 2:
            return _('Paid')
        elif invoice.status == 3:
            days = date.today() - invoice.dueDate
            if days.days == 0:
                return _('DueToday')
            if days.days == 1:
                return _('OverdueForOneDay')
            if days.days > 30:
                return _('LongOverdue')
            return _('OverdueFor %(days) d days') % {'days': days.days}

    get_status.short_description = _('Status')

    def get_projects(self, invoice):
        projects = []
        for project in invoice.project_set.all():
            projects.append(str(project))
        return f'{projects}'

    get_projects.short_description = _('PROJECTS')


class InvoicerOfProjectFilter(SimpleListFilter):
    title = _('INVOICER')
    parameter_name = 'InvoicerIS'

    def lookups(self, request, model_admin):
        return [
            (invoicer.id, invoicer.name) for invoicer in Invoicer.objects.all()
        ]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(
                invoice__in=Invoice.objects.filter(
                    invoicee__in=Invoicee.objects.filter(invoicer=self.value())
                )
            )


class InvoiceeOfProjectFilter(SimpleListFilter):
    title = _('INVOICEE')
    parameter_name = 'InvoiceeIS'

    def lookups(self, request, model_admin):
        return [
            (invoicee.id, invoicee.name) for invoicee in Invoicee.objects.all()
        ]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(
                invoice__in=Invoice.objects.filter(invoicee=self.value())
            )


@register(Project)
class ProjectAdmin(ModelAdmin):
    list_filter = [InvoiceeOfProjectFilter, InvoicerOfProjectFilter]
    search_fields = ('title',)
    list_display = (
        'title',
        'invoice',
    )


class InvoicerOfProjectItemsFilter(SimpleListFilter):
    title = _('Invoicer')
    parameter_name = 'InvoicerIS'

    def lookups(self, request, model_admin):
        return [
            (invoicer.id, invoicer.name) for invoicer in Invoicer.objects.all()
        ]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(
                project__in=Project.objects.filter(
                    invoice__in=Invoice.objects.filter(
                        invoicee__in=Invoicee.objects.filter(invoicer=self.value())
                    )
                )
            )


class InvoiceeOfProjectItemsFilter(SimpleListFilter):
    title = _('Invoicee')
    parameter_name = 'InvoiceeIS'

    def lookups(self, request, model_admin):
        return [
            (invoicee.id, invoicee.name) for invoicee in Invoicee.objects.all()
        ]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(
                project__in=Project.objects.filter(
                    invoice__in=Invoice.objects.filter(invoicee=self.value())
                )
            )


class InvoiceOfProjectItemsFilter(SimpleListFilter):
    title = _('INVOICE')
    parameter_name = 'InvoiceIS'

    def lookups(self, request, model_admin):
        return [
            (invoice.id, invoice.name) for invoice in Invoice.objects.all()
        ]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(
                project__in=Project.objects.filter(
                    invoice=self.value()
                )
            )


@register(Fee)
class FeeAdmin(ModelAdmin):
    list_display_links = None
    list_filter = (
        InvoiceeOfProjectItemsFilter,
        InvoicerOfProjectItemsFilter,
    )
    list_display = (
        'get_invoice',
        'project',
        'vat',
        'count',
        'rateUnit',
        'description',
        'bookKeepingAmount',
    )
    search_fields = ('description',)
    list_editable = (
        'count',
        'vat',
        'rateUnit',
        'description',
        'bookKeepingAmount',
    )

    def get_invoice(self, fee):
        return f'{fee.project.invoice}'

    get_invoice.short_description = _('INVOICE')


class PaymentInvoiceeFilter(SimpleListFilter):
    title = _('INVOICEE')
    parameter_name = _('INVOICEE')

    def lookups(self, request, model_admin):
        return [
            (invoicee.id, invoicee.name) for invoicee in Invoicee.objects.all()
        ]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(
                invoice__in=Invoice.objects.filter(
                    invoicee=self.value()
                )
            )


class PaymentInvoicerFilter(SimpleListFilter):

    title = _('INVOICE')
    parameter_name = _('INVOICE')

    def lookups(self, request, model_admin):
        return [
            (invoicer.id, invoicer.name) for invoicer in Invoicer.objects.all()
        ]

    def queryset(self, request, queryset):
        if self.value():
            return queryset.filter(
                    invoice__in=Invoice.objects.filter(
                        invoicer=self.value()
                    )
            )


@register(Payment)
class PaymentAdmin(ModelAdmin):
    list_filter = (PaymentInvoiceeFilter, PaymentInvoicerFilter)
    list_display = (
        'paymentMethod',
        'paidAmount',
        'get_invoice',
    )
    autocomplete_fields = ('invoice',)

    def get_invoice(self, payment):
        return f'{list(str(invoice) for invoice in payment.invoice.all())}'

    get_invoice.short_description = _('INVOICE')
