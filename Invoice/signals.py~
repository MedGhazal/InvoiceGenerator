from decimal import Decimal
from django.db.models.signals import (
    post_save,
    pre_delete,
    m2m_changed,
)
from django.dispatch import receiver
from .models import Payment, Invoice, Project, Fee


@receiver(m2m_changed, sender=Payment.invoice.through)
def m2m_changed_payment_invoice(**kwargs):
    action = kwargs['action']
    # print(l)
    if kwargs['action'] == 'post_add':
        invoice, payment = kwargs['model'], kwargs['instance']
        for id in kwargs['pk_set']:
            invoice = Invoice.objects.filter(id=id).first()
            invoice.paidAmount += Decimal(
                round(
                    payment.paidAmount / len(kwargs['pk_set']), 2
                )
            )
            invoice.draft = False
            invoice.save()
    # elif kwargs['action'] == 'pre_add':
    #     pass
    # elif kwargs['action'] == 'post_clear':
    #     pass
    # elif kwargs['action'] == 'post_clear':
    #     pass
    elif kwargs['action'] == 'post_remove':
        invoice, payment = kwargs['model'], kwargs['instance']
        for id in kwargs['pk_set']:
            invoice = Invoice.objects.filter(id=id).first()
            invoice = Invoice.objects.filter(id=id).first()
            invoice.paidAmount -= Decimal(
                round(
                    payment.paidAmount / len(kwargs['pk_set']), 2
                )
            )
            invoice.draft = True
            invoice.save()
    # elif kwargs['action'] == 'pre_remove':
    #     invoice, payment = kwargs['model'], kwargs['instance']
    #     for id in kwargs['pk_set']:
    #         invoice = Invoice.objects.filter(id=id).first()
    #         invoice.paidAmount -= payment.paidAmount / len(kwargs['pk_set'])
    #         invoice.save()
    #     remaining_invoices = payment.invoice.exclude(id__in=kwargs['pk_set'])
    #     last_payment = payment.history.most_recent()
    #     for invoice in remaining_invoices:
    #         if last_payment.paidAmount == payment.paidAmount:
    #             invoice.paidAmount = (
    #                 invoice.paidAmount -
    #                 payment.paidAmount / (
    #                     len(kwargs['pk_set']) +
    #                     remaining_invoices.count()
    #                 ) +
    #                 payment.paidAmount / remaining_invoices.count()
    #             )
    #         else:
    #             invoice.paidAmount = (
    #                 invoice.paidAmount -
    #                 last_payment.paidAmount / (
    #                     len(kwargs['pk_set']) +
    #                     remaining_invoices.count()
    #                 ) +
    #                 payment.paidAmount / remaining_invoices.count()
    #             )
    #         invoice.save()


@receiver(pre_delete, sender=Payment)
def pre_delete_payment(**kwargs):
    querySet = kwargs['origin']
    for payment in querySet:
        invoices = payment.invoice.all()
        coverage = Decimal(round(payment.paidAmount / invoices.count(), 2))
        for invoice in invoices:
            invoice.paidAmount -= coverage


# @receiver(pre_delete, sender=Project)
# def pre_delete_project(**kwargs):
#     querySet = kwargs['origin']
#     for project in querySet:
#         invoice = project.invoice
#         amount = 0
#         for fee in project.fee_set():
#             amount -= fee.rateUnit * fee.count * Decimal(1 + fee.vat / 100)
#         invoice.owedAmount -= amount


# @receiver(post_save, sender=Fee)
# def post_save_fee(**kwargs):
#     fee = kwargs['instance']
#     invoice = fee.project.invoice
#     invoice.owedAmount += fee.rateUnit * fee.count * Decimal(1 + fee.vat / 100)
#     invoice.save()


# @receiver(pre_delete, sender=Fee)
# def pre_delete_fee(**kwargs):
#     querySet = kwargs['origin']
#     for fee in querySet:
#         invoice = fee.project.invoice
#         invoice.owedAmount -= fee.rateUnit * fee.count * Decimal(
#             1 + fee.VAT / 100
#         )
#         invoice.save()
